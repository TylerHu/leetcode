package math;

/**
 * LeetCode313. Super Ugly Number(https://leetcode.com/problems/super-ugly-number/description/)
 *
 * Write a program to find the nth super ugly number.
 * Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.
 *
 * Solution: The basic idea is similar to Leetcode264, a new ugly number is generated by multiplying a prime number
 * with previous generated ugly number.
 */
public class SuperUglyNumber {
    public int nthSuperUglyNumber(int n, int[] primes) {
        if (n == 0) {
            return 1;
        }
        int[] uglyNumber = new int[n];
        int[] index = new int[primes.length];
        uglyNumber[0] = 1;
        for (int i = 1; i < n; ++i) {
            uglyNumber[i] = uglyNumber[index[0]] * primes[0];
            for(int j = 1; j < primes.length; ++j) {
                uglyNumber[i] = Math.min(uglyNumber[i], uglyNumber[index[j]] * primes[j]);
            }
            for (int j = 0; j < primes.length; ++j) {
                if (uglyNumber[i] == uglyNumber[index[j]] * primes[j]) {
                    index[j]++;
                }
            }
        }
        return uglyNumber[n-1];
    }
}